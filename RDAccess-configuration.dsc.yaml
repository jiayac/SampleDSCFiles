# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  ########################################
  ### RESOURCES: NVDA and RDAccess Add-On
  ########################################
  resources:
    ### Install: NVAccess.NVDA
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: InstallNVDA
      directives:
        description: Install NVAccess.NVDA
        allowPrerelease: true
      settings:
        id: NVAccess.NVDA
        source: winget
        ensure: Present

    # ### Download: RDAccess Add-On ZIP File from GitHub ### ZIP FILE LOCATION???
    # # ### -------------------------------------
    - resource: PSDscResources/Script
      id: DownloadRDAccessAddOn
      dependsOn:
        - InstallNVDA
      directives:
        description: Download RDAccess Add-On File from GitHub
        allowPrerelease: true
      settings:
        GetScript: |
          @{ Result = Test-Path -Path "$env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon" }
        TestScript: |
          Test-Path -Path "$env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon"
        SetScript: |
          $url = "https://github.com/jiayac/SampleDSCFiles/raw/main/rdAccess.zip"
          $filename = Split-Path -Path $url -Leaf
          $dest = Join-Path -Path $env:APPDATA -ChildPath ('nvda\addons\' + $filename)

          if (-not (Test-Path -Path $dest)) {
              $directory = Split-Path -Path $dest -Parent
              New-Item -Path $directory -ItemType "directory" -ErrorAction SilentlyContinue
          }
          Invoke-WebRequest -Uri $url -OutFile $dest
          Start-Sleep -Seconds 5

    ### Unzip & Install RDAccess Add-On from ZIP
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: InstallNVDAAddOnZIPPackage
      dependsOn:
        - InstallNVDA
      settings:
        GetScript: |
          $path = "$env:APPDATA\nvda\addons"
          @{
            Result = $((Test-Path -Path $path) -eq $true)
          }
        TestScript: |
          $file = "$env:APPDATA\nvda\addons\rdAccess.zip"
          (Test-Path -Path $file) -ne "True"
        SetScript: |

          if ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) {
            Start-Process 'C:\Program Files (x86)\NVDA\nvda.exe'
          }
          $file = "$env:APPDATA\nvda\addons\rdAccess.zip"
          $dest = "$env:APPDATA\nvda\addons\"
          Expand-Archive $file -DestinationPath $dest

    ### Restart and close NVDA Process
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: RestartNVDA
      dependsOn:
        - InstallNVDAAddOnZIPPackage
      settings:
        GetScript: |
          @{
            Result = ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) -eq $true
          }
        TestScript: |
          $false
        SetScript: |
          Start-Sleep -Seconds 5
          if ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) {
            Write-Host "NVDA is running, Stopping NVDA"
            Stop-Process -Name 'NVDA' -Force
          }
          Write-Host "NVDA is not running, Starting NVDA"
          Start-Process 'C:\Program Files (x86)\NVDA\nvda.exe'
          Start-Sleep -Seconds 5
          Write-Host "NVDA is running, Stopping NVDA"
          Stop-Process -Name 'NVDA' -Force 

    ### Update NVDA.ini File: operatingMode = 1
    ## -------------------------------------
    - resource: PSDscResources/Script
      id: SetNVDAPreferences
      dependsOn:
        - RestartNVDA
      settings:
        GetScript: |
          @{
            Result = (Get-Content -Path "$env:APPDATA\nvda\nvda.ini" -ErrorAction SilentlyContinue | Where-Object { $_ -match "^operatingMode=1$" }) -=ne "True"
          }
        TestScript: |
          (Get-Content -Path "$env:APPDATA\nvda\nvda.ini" -ErrorAction SilentlyContinue | Where-Object { $_ -match "^operatingMode=1$" }) -eq "True"

        SetScript: |

          $file = "$env:APPDATA\nvda\nvda.ini"

          $lines = Get-Content -Path $file
          $newLines = @()
          $rdAccessFound = $false

          for ($i = 0; $i -lt $lines.Length; $i++) {
              $newLines += $lines[$i]
              if ($lines[$i] -match "\[rdAccess\]") {
                  $rdAccessFound = $true
                  $newLines += "  operatingMode = 1"
              }
          }

          if (-not $rdAccessFound) {
              $newLines += "[rdAccess]"
              $newLines += "  operatingMode = 1"
              $newLines += "	recoverRemoteSpeech = True"
              $newLines += "  driverSettingsManagement = False"
              $newLines += "  persistentRegistration = False"
              $newLines += "  enableRemoteDesktopSupport = True"
              $newLines += "  enableCitrixSupport = False"
          }

          $newLines | Set-Content -Path $file

  configurationVersion: 0.2.0
### Run the following command to invoke this configuration:
# Get-WinGetConfiguration -File "C:\Repo\azure-devcenter-customizations-tests\Microsoft.Windows.Setting.Accessibility\RDAccess-configuration.dsc.yaml" | Invoke-WinGetConfiguration -Verbose
